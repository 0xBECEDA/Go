#+STARTUP: showall indent hidestars

* Интро
Идея простая: переписать свой старый консольный мессенджер с си на
го. При этом добавить шифрование, поддержку множества клиентов и какойто
интерфейс.

* Механизм работы
** Клиент

Нужно организовать пересылку сообщения от конкретного клиента к
конкретному клиенту. Т.е. у каждого клиента - зарегистрированного
пользователя -  должен быть уникальный id, который не будет меняться от
подключения к подключению.

Подключенные пакеты:

#+NAME: _packages
#+BEGIN_SRC go :noweb yes :tangle client.go
  package main

  import (
      "fmt"
      "net"
      "sync"
      "time"
      "os"
      "strconv"
      "encoding/json"
      "bufio"
  )

  <<_sendPackage>>
  <<_myID>>
#+END_SRC

Структура пакета клиента для отправки:
- id юзера, ~который отправляет~
- id юзера, ~которому отрпавляют~
- буфер, в котором содержится сообщение
- статус отправки сообщения

Пока что уникальный id клиента вводится самим пользователем при запуске клиента -
параметр командной строки. Т.е. id может меняться от запуска к запуску.

[TODO:gmm] Сделать обработчик ошибок отправки и зарезервировать константы
под значения ошибок.

#+NAME: _sendPackage
#+BEGIN_SRC go :noweb yes
  type sendPackage struct {

      MyID int
      UserID int
      Message []string
      SendStatus int
  }

#+END_SRC

На данный момент ID клиента задается как аргумент командной строки при
запуске клиента. Поэтому заводим на стороне клиента глобальную переменную
и функцию, которая вытащит id клиента из аргументов командной строки и
поместит в переменную:

#+NAME: _myID
#+BEGIN_SRC go :noweb yes
  var myID int

  <<_consts>>
  <<_ChatTable>>
#+END_SRC


#+NAME: _GetClientId
#+BEGIN_SRC go :noweb yes :tangle client.go
  func GetClientId() error {

      id, err := strconv.Atoi( os.Args[1] )

      if err != nil {
          return err

      } else {
          myID = id
      }
      return nil
  }
#+END_SRC

Заводим константы: кол-во строк, которое вмещается в буфер, тестовый id
принимающего юзера, которому отправляется пакет, и размер буфера:

[TODO:gmm] если пакет слишком большой - т.е. сообщение слишком большое -
оно должно быть разделено на n пакетов машиной

#+NAME: _consts
#+BEGIN_SRC go :noweb yes
  const (
      packSize = 1036
      msgSizeStrings = 10
  )
#+END_SRC

Функция, которая считывает вывод с консоли строка за строкой, пока не
встретит строку ~"stop"~ - это является сигналом, что считывание надо
прекратить. В случае, если считывается ~"quit"~, то это сигнал, что
клиент хочет завершить работу.

В этом случае будет отправлено сообщение серверу с соответствующим
статусом, что соединение можно отключить.

#+NAME: _getInput
#+BEGIN_SRC go :noweb yes
  func getInput () ( []string, int ) {

      r := bufio.NewReader( os.Stdin )
      input:= make( []string, msgSizeStrings )
      inputStatus := 0

      for i := range input {
          string, err := r.ReadString('\n')

          if err != nil {
              fmt.Printf("getInput: Didn't read string \n")
              break

          } else if string == "stop\n" {
              break

          } else if string == "quit\n" {
              inputStatus = -5
              break
          } else {
              input[i] = string
          }
      }

      // for i := range input{
      // 	fmt.Printf("Read: %s \n", input[i])
      // }

      return input, inputStatus
  }

  <<_makePackage>>
#+END_SRC

Как только считывание прекращено, формируем пакет на отправку:
- парсим ввод
- формируем пакет

Пока что считаем, что первой строкой юзер вводит id клиента, которому
хочет послать пакет (в финальной версии юзер будет переключаться между
окнами в браузере )

[TODO:gmm] Что насчет бесед, в которх больше 2 участников?

#+NAME: _makePackage
#+BEGIN_SRC go :noweb yes
  func makePackage ( input []string, clientStatus int) ( sendPackage, error ) {

      // убираем '\n' после числа
      string := input[0]
      n :=  len(string) - 1

      RecieverUserID, err := strconv.Atoi( string[:n] )
      pack := sendPackage{}
      if err != nil {
          fmt.Printf("makePackage: Didn't convert id of user: ", err.Error(), "\n")

      } else {
          pack.MyID = myID
          pack.UserID = RecieverUserID
          pack.Message = input [1:]
          pack.SendStatus = clientStatus

      }
      return pack, err
  }
#+END_SRC

Открываем сокет типа TCP и коннектимся к серверу (у сервака и клиентов
должен быть один и тот же порт (?))

Возвращаем структуру соеднения ~conn~ и ~nil~ как значение ошибки в
сулчае успеха. Иначе печатаем сообщение об ошибке, вместо ~conn~
возвращаем ~nil~ и саму ошибку.

#+NAME: _ConnectToServer
#+BEGIN_SRC go :noweb yes :tangle client.go
  func ConnectToServer() ( *net.TCPConn, error ) {

      serVaddr :=  "localhost:3425"
      tcpAddr, err := net.ResolveTCPAddr("tcp", serVaddr)

      if err != nil {
          println("ResolveTCPAddr failed:", err.Error())
          return nil, err

      } else {

          // fmt.Printf( "Client tcp addr: %v \n",  tcpAddr)
          connect , err := net.DialTCP( "tcp", nil, tcpAddr)

          if err != nil {
              fmt.Printf( "Connection failed: ", err.Error(), "\n" )
              return nil, err
          }
          return connect, nil
      }
  }

  <<_getMessage>>
  <<_sendMessage>>
#+END_SRC

Коннект к серверу вызывается из мэйна. Если коннект совершился, то:
- запускаем функционал для подсчеты живых частов - если они все
  отрубились, то выходим (потом исправим выход на что-то менее
  радикальное)
- запускаем ~driver loop~, который и будет поддерживать всю работу
  клиента, пока хотя бы один чат жив.

#+NAME: _main
#+BEGIN_SRC go :noweb yes :tangle client.go
  <<_IsItNewChat>>
  <<_getInput>>
  <<_testSerialDeserial>>
  <<_driverLoop>>
  func main () {

      // Tests ()

      err := GetClientId()

      if err != nil {
          fmt.Printf( " Didn't get client id: ", err.Error(), "\n" )
          os. Exit(1)
      }

      connect, err := ConnectToServer()

      if err != nil {
          fmt.Printf( "\n Connection failed, exit \n" )
          os. Exit(1)
      }

      fmt.Printf( "Have a connection with server \n" )
      var wg sync.WaitGroup
      // отслеживаем, сколько "живых" диалогов
      DoneChannel := make( chan string, 100 )
      go countDialogs( DoneChannel )
      go IsAnyChatAlive( &wg )
      wg.Add(1)
      go driverLoop( &wg, DoneChannel, connect )
      wg.Wait()
  }
#+END_SRC


~Driver loop~:
- читаем сообщение юзера с консоли
- парсим (вытаскиваем id юзера, которому отправляется пакет ) и формируем
  пакет на отправку
- проверяем id юзера - принимающей стороны, открыты ли под него потоки на
  отправку и на получение пакетов.

Идея в том, что на каждй чат полагается своя пара потоков на получение и
отправку сообщений. Иначе будет невозможно писать нескольким юзерам
одновременно, как и принимать от них сообщения. Потоки не будут напрямую
связаны с каким-то конкретным чатом. Пакеты, готовые к отправке, будут
писаться в очередь - канал - и любой свободный поток на отправку будет
отправлять пакет.

Чтоб это было возможно, надо проверять, пишем мы условно в новый чат или
нет. Поэтому в тестовом режиме создаем хэш-таблицу, где ключ - это ~id~
юзера, с которым ведется чат, а значение - ~true~. Юзаем хэш-таблицу,
потому что она позволяет находить эементы за O(1) шагов в отличие от
массива.

#+NAME: _ChatTable
#+BEGIN_SRC go :noweb yes
  var ChatTable = make(map[int]bool)
  <<_clientAliveAndNew>>
#+END_SRC

#+NAME: _IsItNewChat
#+BEGIN_SRC go :noweb yes
  func IsItNewChat ( id int ) bool {
      _, found := ChatTable[id]
      return found
  }
#+END_SRC

Если чат уже создан, то просто помещаем пакет в очередь. Если
нет то:

- создаем запись в хэш-таблице
- создаем новую пару потоков
- кладем пакет в очередь
- проверяем статус клиента: он сигнализирует о том, хочет ли юзер выйти в
  оффлайн. Пока что просто тестовый вариант, чтоб не убивать прогу
  аварийно.

#+NAME: _driverLoop
#+BEGIN_SRC go :noweb yes
  func driverLoop( wg *sync.WaitGroup, DoneChannel chan string, connect *net.TCPConn ) {
      SendPackageQueue := make( chan sendPackage, 100 )
      SendLastPackageResult := make( chan bool, 100 )

      for {
          input, clientStatus := getInput()
          SendPack, err := makePackage( input, clientStatus )

          if err == nil {
              found := IsItNewChat ( SendPack.UserID )

              if found == false {
                  go sendMessage( connect, SendPackageQueue, SendLastPackageResult )
                  go getMessage( connect, DoneChannel )
                  DoneChannel <- "new"
                  // go sendMessage( connect, &wg, SendPackageQueue )
                  // wg.Add(1)
                  // go getMessage( connect, &wg )
                  // wg.Add(1)
                  // wg.Wait()
              }
              SendPackageQueue <- SendPack
          }
          // клиент решил выйти из чата
          if clientStatus == -5 {
              // удостовериваемся, что последний отправленный пакет дошел
              result:= <- SendLastPackageResult
              if result == true {
                  // выключаем поток IsAnyChatAlive (его отслеживает main,
                  // чтоб выйти )
                  wg.Done()
                  break
              }
          }
      }
  }
#+END_SRC

Функция ~getMessage~:
- принимает пакет
- десериализует пакет
- проверяет его статус
- если статус 0, то печатает сообщение
- если меньше нуля, то это ошибка и она должна быть обработана
[TODO:gmm] Написать обработчик ошибок доставки.

Так же ~getMesage~ принимает "служебные" сообщения от сервера: может
случиться так, что соединение с сервером будет разорвано. Надо это как-то
отследить. Поэтому при каждом получении какого-то сообщения сервер будет
отсылать пустой пакет, содержащий только статус отправки, который будет
как бы сигнализировать "все окей, сервер работает, пакет
дошел". Установим таймер на приемку сообщений: если в течение 10 секунд
не пришло подтверждение от сервера, то мы считаем, что соединение
разорвано, ~getMessage~ отправляет сообщение в канал для функции .

[TODO:gmm] Понятно, что если сообщение не дошло, то это не повод вырубать
клиент. Надо искать другой доступный сервер или что-то еще. Но пока что
просто будем вырубать клиента, потому что так проще тестировать.

#+NAME: _getMessage
#+BEGIN_SRC go :noweb yes
  <<_checkSendStatus>>
  <<_failedStatus>>
  <<_printRecievedMessage>>

  //принимает сообщения
  // func getMessage( connect *net.TCPConn,  wg *sync.WaitGroup ) int {
  func getMessage( connect *net.TCPConn, ch chan string) int {
      getBuf := make( []byte, packSize )

      for {
          timeoutDuration := 10 * time.Second
          connect.SetReadDeadline( time.Now().Add(timeoutDuration))
          len, err := connect.Read( getBuf )

          if err == nil {
              pack, err := deserialization( getBuf [:len] )

              if err == nil && 0 == checkSendStatus( pack.SendStatus, pack.UserID ) {
                  printRecievedMessage ( pack.UserID, pack.Message )
              }

              } else {
              fmt.Printf("Ошибка чтения: возможно разорвано соединение\n")
              break
              }
      }
      ch <- "quit"
      // wg.Done()
      return 0
  }

  <<_clientCountDialogs>>
#+END_SRC

Проверяет статус пакета:

#+NAME: _checkSendStatus
#+BEGIN_SRC go :noweb yes
  func checkSendStatus( SendStatus int, UserID int ) int {

      switch SendStatus {

      case -1:
          failedStatus( UserID )
          return -1
      case 1:
          return 1
      default:
          return 0
      }
  }
#+END_SRC

Печатает сообщение об ошибке, если статус ~failed~:

#+NAME: _failedStatus
#+BEGIN_SRC go :noweb yes
  func failedStatus ( userID int ) {

      fmt.Printf("Сообщение пользователю c id %d не было доставлено\n", userID);
  }
#+END_SRC

Печатает пришедшее сообщение, если все ок:

#+NAME: _printRecievedMessage
#+BEGIN_SRC go :noweb yes
  func printRecievedMessage ( UserID int, buf []string ) {
      fmt.Printf( "Получено сообщение от пользователя %d:\n", UserID )

      for i := range buf {

          if buf[i] == "" {
              break
          }
          fmt.Printf( buf[i] )
      }
      return
  }
#+END_SRC

Реализуем функционал, который будет следить, чтоб все диалоги клиента не
оказались закрыты - например в случае, если соединение с сервером было
разорвано. В таком случае клиент завершится, не дожидаясь сигнала от
пользователя.

[TODO:gmm] В будущем это надо поменять, попытаться переключиться на
другой сервер или просто выдать сообщение об ошибке, но не выходить из
клиента.

#+NAME: _clientAliveAndNew
#+BEGIN_SRC go :noweb yes
  var alive int
  var new int
#+END_SRC

~countDialogs~ принимает в качестве аргумента канал, по которому от
других потоков ей приходят сообщения.
Если пришло сообщение ~"new"~ , значит открыт новый диалог.
Тогда значение ~alive~ и ~new~ инкрементируется. Если
приходит сообение ~quit~, то ~alive~ декрементируется.

#+NAME: _clientCountDialogs
#+BEGIN_SRC go :noweb yes
  func countDialogs ( ch chan string ) {
      for {
          msg := <- ch
          if msg == "new" {
              alive += 1
              new += 1
              // fmt.Printf("countDialogs: amount of chats %d \n", new)
          } else if msg == "quit" {
              alive -= 1
              // fmt.Printf("countDialogs: amount of alive chats %d \n", alive)
          }
      }
  }

  <<_IsAnyChatAlive>>
#+END_SRC

А эта функция проверяет, жив ли хоть один чат.

#+NAME: _IsAnyChatAlive
#+BEGIN_SRC go :noweb yes
  func IsAnyChatAlive ( wg *sync.WaitGroup ) {
      for {
          if new > 0 && alive == 0 {
              // fmt.Printf("IsAnyChatAlive done \n ")
              wg.Done()
              break
          }
      }
  }

#+END_SRC

Функция ~sendMessage~:

- формирует пакет
- сериализует его
- посылает в соединение
#+NAME: _sendMessage
#+BEGIN_SRC go :noweb yes
  // посылает сообщения
  // func sendMessage( connect *net.TCPConn, wg *sync.WaitGroup, ch chan SendPackage ) int {

  func sendMessage( connect *net.TCPConn, ch chan sendPackage, ch2 chan bool ) int {
      for {
          pack := <- ch
          buf, err := serialization( &pack )

          if err == nil {
               _, err := connect.Write(buf)

               if err != nil {
                   fmt.Printf("Cann't send: %s \n", err.Error())
               } else {
                   // fmt.Printf("Bytes sent: %d \n", len)
                   if pack.SendStatus == -5 {
                       ch2 <- true
                   }
               }
           }
      }
      // wg.Done()
      return 0
  }
  <<_serialization>>
#+END_SRC

Методы ~read~ и ~write~, которые позволяют писать в соединение и читать
из него, принимают только слайсы в качестве аргументов. Это значит, что
придется делать сериализацию и десериализацию, чтоб принимать и
отправлять пакеты, имеющую выше описанную структуру:

#+NAME: _serialization
#+BEGIN_SRC go :noweb yes
  func serialization( pack *sendPackage ) ( []byte, error )  {

      buf, err:= json.Marshal( pack )

      if err != nil {
          fmt.Printf(" \n Cound'n serialize data: ", err.Error(), "\n" )
      }
      return buf, err
  }
  <<_deserialization>>
#+END_SRC

#+NAME: _deserialization
#+BEGIN_SRC go :noweb yes
  func deserialization( buf []byte ) ( sendPackage, error )  {

      pack := sendPackage{}
      err:= json.Unmarshal( buf, &pack )

      if err != nil {
          fmt.Printf(" \n Cound'n deserialize data: ", err.Error(), "\n" )
      }
      return pack, err
  }

#+END_SRC

Тесты:

#+NAME: _Tests
#+BEGIN_SRC go :noweb yes
  func Tests () {

      getInput ()
      testSerialDeserial()
  }
#+END_SRC


#+NAME: _testSerialDeserial
#+BEGIN_SRC go :noweb yes
  func testSerialDeserial() {

      input, status := getInput()

      fmt.Scan(&input)
      fmt.Printf("Read: %s \n", input)

      pack, err := makePackage( input, status )
      if err == nil {
          fmt.Printf("Msg before serialization: %s \n", pack.Message)

          buf, err := serialization( &pack )

          if err != nil {
              fmt.Printf("Serialization Test failed\n")
          } else {
              pack2, err := deserialization( buf )

              if err != nil {
                  fmt.Printf("Deserialization Test failed\n")

              } else {
                  fmt.Printf("Msg after serialization %s \n", pack2.Message)
              }
          }
      }
      return
  }

      <<_Tests>>
#+END_SRC

[TODO:gmm] Придумать, как сделать разные окна для чатов.
В каждом окне должно отражаться имя юзера и история переписки с
ним. Видимо, это придется делать на вебе.

** Сервер
*** Интро
Рефакторинг сервера. Переписываем в модель стейт-машин.
Одновременно на сервере работает 3 стейт-машины:

1. Инициализирует сервер: открывает сокет, слушает из него запросы на
   новые соединения и "включает" третью стейт-машину.
   В случае ошибки - выходит. В случае подключения нового клиента -
   включает в отдельном потоке вторую стейт-машину.

2. Регистрирует клиента в таблице соединений на сервере - сохраняет его
   id и структуру соединения ~conn~ - и поддерживает работу с клиентом.
   Принимает и отсылает от него сообщения. Для каждого клиента работает
   свой экземпляр этой стейт-машины.

3. Эта стейт-машина следит, чтоб на сервере был хотя бы 1 активный
   клиент - если все клиенты не онлайн, то сервер должен "заснуть"
   (сейчас он просто прекращает работу).

Все стейт-машины общаются друг с другом с помощью каналов.

*** Инициализация сервера - работа первой стейт-машины

Разберемся с первой стейт машиной.
Начальное состояние - открыть сокет на чтение. Из него есть выход в 2
возможных состояния: либо завершение сервера (в случае ошибки) - ~ExitFailState~, либо
запуск других стейт машин и прослушка сокета ~RunServerState~

#+NAME: _servInitServerState
#+BEGIN_SRC go :noweb yes :tangle server.go
  <<_servPackeges>>

  func InitServerState() {
      service := "localhost:3425"
      tcpAddr, err := net.ResolveTCPAddr("tcp", service)
      l, err := net.ListenTCP("tcp", tcpAddr)

      if err != nil {
          ExitFailState( err )

      } else {
          RunServerState( l )
      }
  }
  <<_servExitFailState>>
#+END_SRC

~ExitFailState~ просто печатает сообщение об ошибке и завершает работу
сервера.

#+NAME: _servExitFailState
#+BEGIN_SRC go :noweb yes
  func ExitFailState( err error ) {
      fmt.Println("--Server error -- :", err.Error())
      os.Exit(1)
  }
#+END_SRC

~RunServerState~ продолжает работу сервера. Он должен:
- создать каналы для общения между всеми тремя стейт-машинами

- запустить в отдельном потоке стейт-машину
  ~RegisterClientsStateMachine~ - это та самая третья стейт-машина,
  которая "ведет учет" клиентов на сервере

- запустить в отдельном потоке состояние ~ListenConnectionState~ -
   оно слушает новые соединения от клиентов.

После чего ожидать окончания работы потока
~RegisterClientsStateMachine~ - это сигнал о прекращении работы сервера.

#+NAME: _servRunServerState
#+BEGIN_SRC go :noweb yes :tangle server.go
  func RunServerState( l *net.TCPListener ) {
      var wg sync.WaitGroup

      registerClientsChan := make( chan connection, 100 )
      registerClientsChanResult := make( chan bool )

      go RegisterClientsStateMachine( registerClientsChan, registerClientsChanResult, &wg )
      wg.Add(1)

      go AcceptNewConnectionsState( l, registerClientsChan, registerClientsChanResult )
      wg.Wait()
      ExitServerSuccess()
  }

  <<_servAcceptNewConnectionsState>>
  <<_servExitServerSuccess>>
#+END_SRC

~AcceptNewConnectionsState~ печатает сообщение, о том, что сервер
запущен. А затем в бесконечном цикле слушает соединения из открытого
сокета. Единственное состояние, в которое ~AcceptNewConnectionsState~
может перейти - это состояние ошибки с последующим выходом.

#+NAME: _servAcceptNewConnectionsState
#+BEGIN_SRC go :noweb yes
  func AcceptNewConnectionsState( l *net.TCPListener, ch1 chan connection, ch2 chan bool) {
      fmt.Println("SERVER IS ON \n")
      for {
          conn, err := l.AcceptTCP()

          if err != nil {
              ExitFailState( err )

          } else {
              SupportClientChan := make(chan sendPackage, 100)
              go GetMessage( conn, ch1, ch2, SupportClientChan )
              go SendMessage( conn, ch1,  SupportClientChan )
          }
      }
  }
#+END_SRC

~ExitServerSuccess~ - состояние успешного выхода. Происходит только после
того, как завершится стейт-машина ~RegisterClientsStateMachine~ -
т.е. когда все клиенты окажутся неактивны.

#+NAME: _servExitServerSuccess
#+BEGIN_SRC go :noweb yes
  func ExitServerSuccess() {
      os.Exit(0)
  }
#+END_SRC

*** RegisterClientsStateMachine или третья стейт-машина

Вторая стейт машина - которая запускается для каждого клиента своя -
наиболее сложная из данных трех. Поэтому я думаю, что ее алгоритм будет
проще понять в контексте других двух.

~RegisterClientsStateMachine~, как уже неоднократно говорилось ранее,
"ведет учет" клиентов. Что это значит?

У нас многопользовательский мессенджер. Это значит, что каждый
пользователь должен иметь возможность отправить сообщение каждому
пользователю, в чаты и самому себе. Пользователи могут связаться друг с
другом, если знаю ID друг друга - [TODO:gmm] в будущем заменить на ники,
окна чата или еще что-то. А сервер должен знать, в какое соединение с
каким клиентом связано, чтоб из n подключений полсать сообщение туда,
куда надо.

Поэтому надо связать ID клиента и его подключение, а так же иметь
возможность быстро искать это подключение. А так же серверу хорошо бы
знать стату клиента - онлайн он или оффлайн, чтоб заснуть или выйти, если
все клиенты оффлайн.

Поэтому создаем структуру, которая связывает все сведения о клиенте
воедино.

#+NAME: _Connection
#+BEGIN_SRC go :noweb yes
  type connection struct {
      Status string
      ClientID int
      Connect *net.TCPConn
  }

  <<_servConsts>>
#+END_SRC

Так же клиентов надо запоминать - иначе невозможно послать
сообщения - поэтому нужна база зарегистрированных на сервере клиентов.
Оформляем ее в виде хэш-таблицы, где ключ - это id клиента, а значение -
его структура.

#+NAME: _servConnectionsTable
#+BEGIN_SRC go :noweb yes
  var ConnectionsTable = make(map[int]connection)
#+END_SRC

Теперь о самой стейт-машине. Эта машина:
- регистрирует новых клиентов
- возвращает
- ведет учет, сколько их "вживых" и сколько было зарегистрированно
- сигнализирует, если нет ни одного клиента онлайн

Данные стейт-машина получает из канала, куда постоянно приходят структуры
типа ~connection~. Первым делом машина проверяет статус клиента - он
может быть "new" - тогда его надо зарегистрировать и отправить в другой
канал сообщение, что клиент успешно зарегистрирован на сервере и
инкрементировать кол-во зарегистрированных клиентов и кол-во живых - или
"dead" - тогда надо декрементировать кол-во активных клиентов и
проверить, есть еще активные клиенты или нет. Если никого нет, то
выходим.

#+NAME: _servRegisterNewClient
#+BEGIN_SRC go :noweb yes :tangle server.go
  func RegisterClientsStateMachine( ch chan connection, ch2 chan bool, wg *sync.WaitGroup ) {

      var alive int
      var all int

      for {
          newConnection, ok := <- ch

          if ok == false {
              wg.Done()
              return

          } else {
              state := newConnection.Status

              switch state {

              case "new":
                  // сохранить нового клиента
                  ConnectionsTable[newConnection.ClientID] = newConnection
                  alive++
                  all++
                  ch2 <- true

              case "dead":
                  all--

                  if alive > all && alive == 0 {
                      wg.Done()
                      return
                  }
              }
          }
      }
      return
  }
#+END_SRC

* Стейт машина для обработки клиента

Это наиболее разветвленная стейт-машина. Для каждого клиента создается в
отдельном потоке экземпляр этой стет-машины.

Она состояит из двух одновременно работающих потоков:
- ~GetMessege~ - который постоянно принимает пакеты от клиента
- ~SendMessege~ - который постоянно отправляет пакеты клиентам, которым
  они предназначены, если это возможно, а так же шлет "пинг" клиенту.

Эти потоки общаются друг с другом с помощью канала и фактически сами по
тебе являются крохотными стейт-машинами.

*** GetMessege
Когда клиент только подключается к серверу, сервер не знает его ID -
известна только структура соединения. Поэтому сервер только включает
новый экземпляр стейт-машины, а вот ~GetMessage~ при получении первого
пакета от клиента, вызовет регистрацию клиента, передав его структуру со
статусом "new" стейт-машине ~RegisterClientsStateMachine~.

То же самое, если клиент отправит сообщение о своем выходе - тогда
~GetMessage~ отправит структуру клиента со статусом "dead".
К тому же ~GetMessage~ должен перенаправлять пакеты ~SendMessege~,
который их будет отправлять.

Поэтому ему помимо структуры соединения клиента передается аж три канала:
первые два служат для общения с ~RegisterClientsStateMachine~: через один
ему посылаются структура клиента для регистрации, а через другой
считывается ответ, зарегестрирован ли клиент. Третий же канал служит для
общения с ~SendMessege~ и через него передаются принятые пакеты.

Так же уже говорилось, что сервер "пингует" клиент, сообщая ему, что
соединение не разорвано: [TODO:gmm] если клиент ничего не слал n времени,
это повод считать, что он не онлайн.

Пинг будет происходить каждые 4 секунды - для этого ~GetMessege~ на своей
стороне создаст пустой пакет, который пошлет ~SendMessege~ через канал,
чтоб тот отослал его клиенту - как клиент определит, что пакет пустой и
подробно о структуре пакета будет рассказано в разделе о клиенте.

Таким образом у GetMessage есть следующие состояния:
- пакет пришел (да/нет)
- клиент зарегистрирован (да/нет)

#+NAME: _GetMessage
#+BEGIN_SRC go :noweb yes
  <<_serialization>>

  func GetMessage( connect *net.TCPConn, ch chan connection, ch2 chan bool,
      ch3 chan sendPackage ) {

      RegistrState := "no"
      buf := make([]byte, packSize)

      for {
          timeoutDuration := 4 * time.Second
          connect.SetReadDeadline( time.Now().Add(timeoutDuration))
          len, err := connect.Read( buf )

          // пакет пришел?
          switch err {

          // да
          case nil:
              fmt.Printf("--GetMessage--: message recieved, len %d bytes \n", len );

              // клиент зарегистрирован?
              switch RegistrState {

              // нет
              case "no":
                  pack, err := deserialization( buf[:len] )
                  // отправить данные клиента на регистрацию
                  if err == nil {
                      newConnection:= connection{ Status: "new", ClientID: pack.MyID,
                          Connect:  connect }
                      ch <- newConnection

                      // регистрация законцена?
                      finished :=  <- ch2
                      if finished == true {
                          ch3 <- pack
                          RegistrState = "yes"
                      }
                  }
                  // да
              case "yes":
                  pack, err := deserialization( buf[:len] )
                  if err == nil {
                      ch3 <- pack
                  }
              }

          // нет
          default:
              pack := sendPackage{ SendStatus: 1 }
              ch3 <- pack

          }
      }
  }

  <<_servSendMessage>>
#+END_SRC

*** SendMessage
~SendMessage~ в свою очередь просто отправляет пакеты юзеру и имеет
слдующие возможные состояния:
- юзер, которому преднахначается пакет, не существует (еще не зареган в
  таблице соединений) - тогда у пакета изменится статус отправки и он
  будет отправлен тому клиенту, от которого он пришел
- юзер, которому преднзначается пакет, существует - тогда будет найдено
  его соединение и пакет будет ему отправлен
- отправляется пакет-пинг (он не содержит в себе сообщение) - в этом
  случае не имеет значения, зарегистрирован клиент или нет
- юзер хочет выйти - тогда надо отправить в ~RegisterClientsStateMachine~
  структуру клиента со статусом "dead", а пакет - не отправлять.

[TODO:gmm] убрать запрос напрямую к глобальной таблице соединений
[TODO:gmm] ввести константы для статусов отправки
#+NAME: _SendMessage
#+BEGIN_SRC go :noweb yes
  <<_servCheckErrorSendMessage>>

  func SendMessage( MyConnect *net.TCPConn, ch1 chan connection, ch2 chan sendPackage) {

      for {
          pack := <- ch2
          status := pack.SendStatus

          // проверяем статус отправки
          switch status {

          // пустой пинг-пакет
          case 1:
              sendBuf, err := serialization( &pack )

              if err == nil {
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }

          // полноценный пакет
          case 0:
              CurConnect, found := ConnectionsTable[pack.UserID]

              // получатель зарегистрирован?
              switch found {

              case true:
                  fmt.Printf("found\n")
                  connectUser := CurConnect.Connect
                  fmt.Printf("%v \n", connectUser)
                  sendBuf, err := serialization( &pack )
                  len, err := connectUser.Write( sendBuf )
                  CheckErrorSendMessage( err, len)

              case false:
                  fmt.Printf("not found\n")
                  pack.SendStatus = -1
                  sendBuf, err := serialization( &pack )
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }
          // клиент сообщил о выходе
          case -5:
              DeadConnect := connection{ Status: "dead", ClientID: pack.MyID }
              ch1 <- DeadConnect
              return
          }
      }
  }

  <<_servMain>>
#+END_SRC

Теперь реализуем функцию, которая проверяет ошибки:

#+NAME: _servCheckErrorSendMessage
#+BEGIN_SRC go :noweb yes
  func CheckErrorSendMessage( err error, len int ) {
      if err != nil {
          fmt.Printf("--CheckErrorSendMessage--: Can't send: %s \n", err.Error())
      } else {
          fmt.Printf("--CheckErrorSendMessage--: Bytes sent: %d \n", len)
      }
      return
  }
#+END_SRC

*** Константы, пакеты и main
Вписываем необходимые пакеты:

#+NAME: _servPackeges
#+BEGIN_SRC go :noweb yes :tangle
  package main

  import (
      "fmt"
      "net"
      "os"
      "encoding/json"
      "sync"
      "time"
  )

  <<_sendPackage>>
  <<_servConnection>>
#+END_SRC

Теперь введем необходимые константы, которые использу.тся на стороне
сервера:

[TODO:gmm] Нормально установить максимально возможный размер пакета. Если
пакет больше - резать на стороне клиента и отправлять частями.

#+NAME: _servConsts
#+BEGIN_SRC go :noweb yes
  const (
      packSize = 1000
      msgSizeStrings = 10
  )

  <<_servConnectionsTable>>
#+END_SRC

Добавляем ~main~, который вызывает первую стейт-машину,
инициализирующую работу сервера:

#+NAME: _servMain
#+BEGIN_SRC go :noweb yes

  func main () {
      InitServerState()
      return
  }

#+END_SRC

*** Компоненты, которые будут объяснены на стороне клиента

Без этого не станглится и не заработает.

#+NAME: _sendPackage
#+BEGIN_SRC go :noweb yes
  type sendPackage struct {

      MyID int
      UserID int
      Message []string
      SendStatus int
  }
#+END_SRC

#+NAME: _serialization
#+BEGIN_SRC go :noweb yes
  func serialization( pack *sendPackage ) ( []byte, error )  {

      buf, err:= json.Marshal( pack )

      if err != nil {
          fmt.Printf(" \n Cound'n serialize data: ", err.Error(), "\n" )
      }
      return buf, err
  }
  <<_deserialization>>
#+END_SRC

#+NAME: _deserialization
#+BEGIN_SRC go :noweb yes
  func deserialization( buf []byte ) ( sendPackage, error )  {

      pack := sendPackage{}
      err:= json.Unmarshal( buf, &pack )

      if err != nil {
          fmt.Printf(" \n Cound'n deserialize data: ", err.Error(), "\n" )
      }
      return pack, err
  }

#+END_SRC

*** Новая идея для сервера

У каждого соединения есть очередь: в нее будут записаны все пакеты,
которые должны быть отправлены этому клиенту. Эта очередь будет
представлять из себя канал, из которого поток ~SendMessege~, созданный
специально для этого клиента, будет читать пакеты и отправлять их.
Поэтому каждая структура клиента на сервере будет включать в себя еще и
канал, по которому с ним можно связаться.

Получим пакет, любой поток ~GetMessage~ будет десериализовывать его,
получать из таблицы соединений очередь клиента, записывать в него пакет,
и на этом все.

А поток ~SendMessege~ будет постоянно читать из очереди своего
клиента. Если в ней ничего нет, он будет формировать на своей стороне
пустой пакет-пинг и отправлять его.

Поэтому добавляем в ~connection~ поле очереди:

#+NAME: _servConnection
#+BEGIN_SRC go :noweb yes
  type connection struct {
      Status string
      ClientID int
      SendQueue chan sendPackage
      Connect *net.TCPConn
  }

  <<_servConsts>>
#+END_SRC

Изменяем ~GetMessege~:
#+NAME: _servGetMessage
#+BEGIN_SRC go :noweb yes :tangle server.go
  <<_serialization>>

  func GetMessage( connect *net.TCPConn, ch chan connection, ch2 chan bool,
      ch3 chan sendPackage ) {

      RegistrState := "no"
      buf := make([]byte, packSize)

      for {
          len, err := connect.Read( buf )

          // пакет получен
          if err ==  nil {
              fmt.Printf("--GetMessage--: message recieved, len %d bytes \n", len );
              pack, err := deserialization( buf[:len] )

              if err == nil {
                  // клиент еще не был зарегистрирован
                  if RegistrState == "no" {
                      newConnection:= connection{ Status: "new", ClientID: pack.MyID,
                          SendQueue: ch3, Connect:  connect }
                      ch <- newConnection

                      // регистрация закончена?
                      finished :=  <- ch2
                      if finished == true {
                          RegistrState = "yes"
                      }
                  }

                  client, found := ConnectionsTable[pack.UserID]
                  if found == true {
                      client.SendQueue <- pack

                  } else {
                      pack.SendStatus = -1
                      ch3 <- pack
                  }
              }
          }
      }
  }

  <<_servSendMessage>>
#+END_SRC

Теперь ~SendMessage~ просто читает из очереди пакеты. Если очередь
пустая, то отправляется пакет-пинг.

#+NAME: _servSendMessage
#+BEGIN_SRC go :noweb yes
  <<_servCheckErrorSendMessage>>

  func SendMessage( MyConnect *net.TCPConn, ch1 chan connection, ch2 chan sendPackage) {

      for {
          select {
          case pack := <- ch2:

              status := pack.SendStatus
              // проверяем статус отправки
              switch status {
                  // клиент сообщил о выходе
              case -5:
                  DeadConnect := connection{ Status: "dead", ClientID: pack.MyID }
                  ch1 <- DeadConnect
                  return

              default:
                  sendBuf, err := serialization( &pack )
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }

          default:
              time.Sleep(4 * time.Second)
              pack := sendPackage{ SendStatus: 1 }
              sendBuf, err := serialization( &pack )

              if err == nil {
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }
          }
      }
  }

  <<_servMain>>
#+END_SRC

[TODO:gmm] Реализовать следующий функционал:

- хранить базу с переписками всех пользователей друг с другом
- у каждого соединения есть очереди сообщений. Создать функционал,
  который будет обходить очереди и если в них больше определенного кол-ва
  пакетов, то выгружать пакеты из очереди (куда?)
- реализовать функционал, который откладывает посылку сообщения клиенту,
  если он не в сети (но надо ли это? все мессенджеры спокойно отправляют
  сообщения неактивным клиентам, а те как прочитают, так прочитают)

*** База данных сообщений

Надо хранить всю переписку пользователей. В этом поможет постгресс.
