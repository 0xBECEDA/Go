#+STARTUP: showall indent hidestars

* Горутины

** Что такое горутина
Горутина - это по сути фибер, т.е. легковесный поток, который управляется
рантаймом языка го. Можно запускать тысячи горутин в одном потоке (как
это работает? поток постоянно меняет контекст и исполняет то ту, то эту
горутину?).

Каждая горутина представлена объектом ~g~ - структурой.

Первое поле этой стрктуры - это ~stack~, потому что у каждой горутины
свой стек. Со старта его размер 2 кб. Если функция, выполняющаяся в
горутине, требует большего объема стека, то выделается еще страница. Но
максимальный размер стека на 32-разрядной системе составляет 250 байт, а
на 64-разряной - 1 гигабайт.

Сорцы структуры здесь
https://github.com/golang/go/blob/f296b7a6f045325a230f77e9bda1470b1270f817/src/runtime/runtime2.go#L395
#+NAME: type_g
#+BEGIN_SRC go :noweb yes
  type g struct {
      stack       stack   // offset known to runtime/cgo
      stackguard0 uintptr // offset known to liblink
      stackguard1 uintptr // offset known to liblink
      <<panic>>
#+END_SRC

Затем идет поле ~panic~. Оно содержит указатель на структуру типа
~panic~ - эта структура хранит информацию об активной
"панике",т.е. ошибке, возникшей в выполнении программы. Значения этой
структуры всегда находятся на стеке

#+NAME: panic
#+BEGIN_SRC go :noweb yes
  _panic       *_panic
  <<defer>>
#+END_SRC

Поле ~defer~ представляет собой указатель на структуру ~defer~. Эта
структура содержит в себе информацию о ~call~, который мы пометили как
~defer~: т.е. вызов функции выполнится после того, как выполнятся все
вызовы вокруг него, хотя аргументы вызова вычислены сразу.

#+NAME: defer
#+BEGIN_SRC go :noweb yes
  _defer       *_defer
  <<m_ptr>>
#+END_SRC

В поле ~m~ хранится указатель на структур ~m~ - структуру открытого
потока ОС. Скорее всего, это структура потока, в котором будет
выполняться горутина.

#+NAME: m_ptr
#+BEGIN_SRC go :noweb yes
  m            *m
#+END_SRC

Пропустим поля ~sched~, ~syscallsp~, ~syscallpc~, их смысл пока не очень
понятен.

Дальше идет ~stktopsp~, судя по всему, это указательна вершну стека
горутины, чтоб всегда можно было сделать бэктрейс.

#+NAME: stktopsp
#+BEGIN_SRC go :noweb yes
  stktopsp     uintptr
#+END_SRC

Поле ~param~ содержит в себе указатель на параметр, переданный горутине
при пробуждении. Подозреваю, что это не указатель на параметры функции,
которая вызывается в горутине.

#+NAME: defer
#+BEGIN_SRC go :noweb yes
  param        unsafe.Pointer // passed parameter on wakeup
#+END_SRC

Пропустим еще несколько полей.
Поле ~waitsince~ содержит примерное время, когда горутина была
заблокирована:

#+NAME: defer
#+BEGIN_SRC go :noweb yes
  waitsince    int64      // approx time when the g become blocked
  waitreason   waitReason // if status==Gwaiting
#+END_SRC

И прочие поля:
#+BEGIN_SRC go

  preempt       bool // preemption signal, duplicates stackguard0 = stackpreempt
  preemptStop   bool // transition to _Gpreempted on preemption; otherwise, just deschedule
  preemptShrink bool // сократить стек к какой-то синхронной точке

  asyncSafePoint bool // это поле установлено, если горутина была остановлена в асинхронной
                      // точке. This means there are frames on the stack
                      // without precise pointer information.

  paniconfault bool   // поле устанавливается в случае, если во время исполнения горутины
                      // возникла ошибка
  gcscandone   bool   // g has scanned stack; protected by _Gscan bit in status
  throwsplit   bool    // must not split stack

  activeStackChans bool  // показывает, есть ли незаблокированные каналы, укзывающие куда-то
                         // в стек горутины. Если это так, то устанавливается защита этих
                         // областей стека

  raceignore     int8     // ignore race detection events
  sysblocktraced bool     // StartTrace has emitted EvGoInSyscall about this goroutine
  sysexitticks   int64    // cputicks when syscall has returned (for tracing)
  traceseq       uint64   // trace event sequencer
  tracelastp     puintptr // last P emitted an event for this goroutine
  lockedm        muintptr
  sig            uint32
  writebuf       []byte
  sigcode0       uintptr
  sigcode1       uintptr
  sigpc          uintptr
  gopc           uintptr         // pc of go statement that created this goroutine
  ancestors      *[]ancestorInfo // ancestor information goroutine(s) that created
                                 // this goroutine (only used if debug.tracebackancestors)
  startpc        uintptr         // pc of goroutine function
  racectx        uintptr
  waiting        *sudog         // sudog structures this g is waiting on
                                // (that have a valid elem ptr); in lock order
  cgoCtxt        []uintptr      // cgo traceback context


  labels         unsafe.Pointer // profiler labels
  timer          *timer         // cached timer for time.Sleep
  selectDone     uint32         // are we participating in a select and did someone
                                // win the race?

  // Per-G GC state

  // gcAssistBytes is this G's GC assist credit in terms of
  // bytes allocated. If this is positive, then the G has credit
  // to allocate gcAssistBytes bytes without assisting. If this
  // is negative, then the G must correct this by performing
  // scan work. We track this in bytes to make it fast to update
  // and check for debt in the malloc hot path. The assist ratio
  // determines how this corresponds to scan work debt.
  gcAssistBytes int64
  }
   #+END_SRC

** Как работает планировщих горутин

Сорцы здесь
https://github.com/golang/go/blob/f296b7a6f045325a230f77e9bda1470b1270f817/src/runtime/proc.go#L19

Задача планировщика - распределить готовые к исполнению горутины по
работающим потокам ОС.

Есть три главный концепции (аббревиуатры):
- ~G~ - это сама горутина, в документации ей соответствует ~type g~ -
  структура горутины. Когда горутина завершает свою работу, ее структура
  возвращается в пулл доступных структур, чтоб новая горутина могла ее занять.
- ~M~ - рабочий поток, у него тип ~type m~.
  У каждого рабочего потока есть свой системный стек. Этот стек, в
  отличие от стека горутины, не умеет расти. Но он изначально достаточно
  большой, чтоб это не потребовалось.
- ~P~ - контекст планирования, необходимый для выполнения кода, который мы
  хотим исполнить через горутину. ~P~ обозначает ~type p~.

Структуры ~g~, ~m~ и ~p~ выделяются в куче, но при этом эта память не
совобождается. Следовательно, когда какая-то структура становится не
нужна, она просто перезаписывается новыми данными другой структуры такого
же типа - по крайей мере, я не могу придумать другой механизм, который
позволяет не освобождать память в куче, но при этом не исчерпать ее.
Подозреваю, что ~GC~ - сборщик мусора - следит за тем, какие структуры
можно переписывать, а какие нет.


*** Методы организации многопоточных вычислений

Есть два варианта, как нарезать вычисления на потоки:
1. Несколько пользовательских потоков оздаются внутри одного потока
   ОС. Плюсы - быстрое переключение контекста (т.е. когда сохраняются все
   регистры и стек, вычисление переходит на другой поток, потом
   сохраняется его состояние регистров и стека, и управелние переходит на
   поток, с которого ушли, и вычисление возобоновляется ровно с той
   точки, с которой ушли). Минусы - не используются преимущества
   многоядерных машин.

2. Каждому потоку пользователя соответствует поток оси. Из плюсов -
   используем преимущества многоядерных машин, из минуосв - контекст
   переключать долго.

*** Организация многопоточных вычислений в го

Как это делает го: на каждом потоке оси запускается множество
пользовательских потоков. Таким образом получаем плюсы от обоих
подходов.

Получается, что для каждого ~M~ - потока оси - существует свой ~P~ -
контекст планирования, на котором исполняется ~G~ - горутина. Когда
горутина завершается, ее объект помечается как свободный. И потом ~M~
может использовать его для новой горутины. А если потом ~M~ завершается,
то он его ~P~ - контекст планирования - возвращается в пулл и его может
использовать новый поток ~M~.

Поток ~M~ должен удерживать свой (?) контекст. Количество одновременно
удерживаемых контекстов задается переменной ~GOMAXPROCS~ или функцией
периода выполнения ~GOMAXPROCS()~. Эта величина не изменяется на
протяжении выполнения програмы и обозначает, сколько участков кода GO
(потоков ~M~ ? ) может быть выполнено одновременно.

Тем не менее, это правило вполне может нарушаться
(см. [[*%D0%9E%D0%B1%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0 %D1%81%D0%B8%D1%81%D1%82%D0%B5%D0%BC%D0%BD%D1%8B%D1%85 %D0%B2%D1%8B%D0%B7%D0%BE%D0%B2%D0%BE%D0%B2][Обработка системных вызовов]])

Горутины, которые еще не выполняются, но готовы для планирования,
находятся в списках - очередях, которые называются ~runqueues~. Каждый
раз, когда вызывается оператор ~go~ - создание горутины - планировщик
берет первую горутину из очереди, настраивает ей стек и ~rip~ и горутина
начинает исполняться. А в конец очереди помещается новая горутина,
готовая для планирования (?). Такое состояние системы называется устойчивым.

Каждый контекст ( потока ~M~ ?) обладает своей собственной очередью
исполнения. Если бы была только глобальная очередь для всей контекстов, то ее
постоянно приходилось бы лочить мьютексами, а это долго.

Но, тем не менее, глобальная очередь есть - в ней тоже хранятся горутины
на случай, если они закончатся в локальных очередях. А контексты потоков
~M~ периодически проверяют, нет ли в глобальной очереди горутин, иначе
они никогда не исполнятся.

*** Обработка системных вызовов

Это пример неустойчивого состояния системы.

Потоки ~M~ могут передавать свои контексты - за этим контексты и
нужны. Если поток будет заблокирован по какой-то причине -
например,какой-то горутине нужно исполнить системный вызов - то он
передаст весь свой контекст другому, возможно даже специально созданному
ради этого потоку ~M~, и на этом новом потоке будет продолжаться
вычисление (у нас же могут быть сотни горутин запущены в одном потоке).

И это именно тот случай, когда переменная ~GOMAXPROCS~ установлена в 1, а
потоков ~M~ оказывается два (или больше, если еще какая-то горутина
зависнет).

Когда системный вызов исполнится и исходный поток ~M~ вернется к жизни,
то ему нужно получить контекст обратно, чтоб доисполнить горутину,
которая вызывала системный вызов. Обычно он заимствует контекст у
какого-то другого потока. Если заимствовать контекст не удалось, то поток
возвратит горутину в глобальную очередь горутин, после чего поток либо
завершается, либо засыпает.

*** Заимствование работы (горутин)

Это еще один пример неустойчивого положения в системе.
Предположим, какой-то контекст - поток ~M~ исчерпал свою локальную
очередь исполнения, а при этом есть еще какой-то объем кода, который
предстоит выполнить.

Завершать поток в таком случае - глупо. Поэтому поток смотрит в
глобальную очередь горутин и берет их оттуда, и продолжает исполнение.
Если же горутины кончились и в глобальной очереди, то поток попробует
позаимствовать горутины из других потоков - свиснуть примерно половину у
кого-то из них. Таким образом получается, что работа есть для каждого
потока.

** Синхронизация
Полезная статья
https://github.com/golang/go/blob/release-branch.go1.14/src/runtime/HACKING.md

Рантайм го имеет несколько механизмов синхронизации.

~Мьютекс~
Мьюеткс хорошо использовать для короткой блокировки разделяемых
ресурсов. Мьютекс блокирует весь поток ~M~, но делает это в обход
планировщика. В результате планировщик не перебросит контекст
заблоченного потока другому потоку, и все горутины, работающие на этом
потоке, токе окажутся заблокированны.

~Каналы~
Это более дешевый метод синхронизации. Мы можем создать канал, в который
одна горутина будет писать, а другая горутина будет из него
читать. Операции с каналами являются блокирующими по умолчанию для
горутин. Это значит, когда горутина, записавшая что-то в канал, будет
заблокирована до тех пор, пока другая горутина не прочитает из этого
канала. Поэтому возможно, чтоб две или более горутин писали в один канал,
а другая горутиа считывала эти значения: первая записала -
заблокировалась, ждет чтения, вторая записала - заблокировалась, ждет,
пока прочитают, третья горутина прочитала два значения - первая и вторая
горутины разблокировались.
