#+STARTUP: showall indent hidestars


* Интро
Рефакторинг сервера. Переписываем в модель стейт-машин.
Одновременно на сервере работает 3 стейт-машины:

1. Инициализирует сервер: открывает сокет, слушает из него запросы на
   новые соединения и "включает" третью стейт-машину.
   В случае ошибки - выходит. В случае подключения нового клиента -
   включает в отдельном потоке вторую стейт-машину.

2. Регистрирует клиента в таблице соединений на сервере - сохраняет его
   id и структуру соединения ~conn~ - и поддерживает работу с клиентом.
   Принимает и отсылает от него сообщения. Для каждого клиента работает
   свой экземпляр этой стейт-машины.

3. Эта стейт-машина следит, чтоб на сервере был хотя бы 1 активный
   клиент - если все клиенты не онлайн, то сервер должен "заснуть"
   (сейчас он просто прекращает работу).

Все стейт-машины общаются друг с другом с помощью каналов.

* Инициализация сервера - работа первой стейт-машины

Разберемся с первой стейт машиной.
Начальное состояние - открыть сокет на чтение. Из него есть выход в 2
возможных состояния: либо завершение сервера (в случае ошибки) - ~ExitFailState~, либо
запуск других стейт машин и прослушка сокета ~RunServerState~

#+NAME: _servInitServerState
#+BEGIN_SRC go :noweb yes :tangle server.go
  <<_servPackeges>>

  func InitServerState() {
      service := "localhost:3425"
      tcpAddr, err := net.ResolveTCPAddr("tcp", service)
      l, err := net.ListenTCP("tcp", tcpAddr)

      if err != nil {
          ExitFailState( err )

      } else {
          RunServerState( l )
      }
  }
  <<_servExitFailState>>
#+END_SRC

~ExitFailState~ просто печатает сообщение об ошибке и завершает работу
сервера.

#+NAME: _servExitFailState
#+BEGIN_SRC go :noweb yes
  func ExitFailState( err error ) {
      fmt.Println("--Server error -- :", err.Error())
      os.Exit(1)
  }
#+END_SRC

~RunServerState~ продолжает работу сервера. Он должен:
- создать каналы для общения между всеми тремя стейт-машинами

- запустить в отдельном потоке стейт-машину
  ~RegisterClientsStateMachine~ - это та самая третья стейт-машина,
  которая "ведет учет" клиентов на сервере

- запустить в отдельном потоке состояние ~ListenConnectionState~ -
   оно слушает новые соединения от клиентов.

После чего ожидать окончания работы потока
~RegisterClientsStateMachine~ - это сигнал о прекращении работы сервера.

#+NAME: _servRunServerState
#+BEGIN_SRC go :noweb yes :tangle server.go
  func RunServerState( l *net.TCPListener ) {
      var wg sync.WaitGroup

      registerClientsChan := make( chan connection, 100 )
      registerClientsChanResult := make( chan bool )

      go RegisterClientsStateMachine( registerClientsChan, registerClientsChanResult, &wg )
      wg.Add(1)

      go AcceptNewConnectionsState( l, registerClientsChan, registerClientsChanResult )
      wg.Wait()
      ExitServerSuccess()
  }

  <<_servAcceptNewConnectionsState>>
  <<_servExitServerSuccess>>
#+END_SRC

~AcceptNewConnectionsState~ печатает сообщение, о том, что сервер
запущен. А затем в бесконечном цикле слушает соединения из открытого
сокета. Единственное состояние, в которое ~AcceptNewConnectionsState~
может перейти - это состояние ошибки с последующим выходом.

#+NAME: _servAcceptNewConnectionsState
#+BEGIN_SRC go :noweb yes
  func AcceptNewConnectionsState( l *net.TCPListener, ch1 chan connection, ch2 chan bool) {
      fmt.Println("SERVER IS ON \n")
      for {
          conn, err := l.AcceptTCP()

          if err != nil {
              ExitFailState( err )

          } else {
              SupportClientChan := make(chan sendPackage, 100)
              go GetMessage( conn, ch1, ch2, SupportClientChan )
              go SendMessage( conn, ch1,  SupportClientChan )
          }
      }
  }
#+END_SRC

~ExitServerSuccess~ - состояние успешного выхода. Происходит только после
того, как завершится стейт-машина ~RegisterClientsStateMachine~ -
т.е. когда все клиенты окажутся неактивны.

#+NAME: _servExitServerSuccess
#+BEGIN_SRC go :noweb yes
  func ExitServerSuccess() {
      os.Exit(0)
  }
#+END_SRC

* RegisterClientsStateMachine или третья стейт-машина

Вторая стейт машина - которая запускается для каждого клиента своя -
наиболее сложная из данных трех. Поэтому я думаю, что ее алгоритм будет
проще понять в контексте других двух.

~RegisterClientsStateMachine~, как уже неоднократно говорилось ранее,
"ведет учет" клиентов. Что это значит?

У нас многопользовательский мессенджер. Это значит, что каждый
пользователь должен иметь возможность отправить сообщение каждому
пользователю, в чаты и самому себе. Пользователи могут связаться друг с
другом, если знаю ID друг друга - [TODO:gmm] в будущем заменить на ники,
окна чата или еще что-то. А сервер должен знать, в какое соединение с
каким клиентом связано, чтоб из n подключений полсать сообщение туда,
куда надо.

Поэтому надо связать ID клиента и его подключение, а так же иметь
возможность быстро искать это подключение. А так же серверу хорошо бы
знать стату клиента - онлайн он или оффлайн, чтоб заснуть или выйти, если
все клиенты оффлайн.

Поэтому создаем структуру, которая связывает все сведения о клиенте
воедино.

#+NAME: _servConnection
#+BEGIN_SRC go :noweb yes
  type connection struct {
      Status string
      ClientID int
      Connect *net.TCPConn
  }

  <<_servConsts>>
#+END_SRC

Так же клиентов надо запоминать - иначе невозможно послать
сообщения - поэтому нужна база зарегистрированных на сервере клиентов.
Оформляем ее в виде хэш-таблицы, где ключ - это id клиента, а значение -
его структура.

#+NAME: _servConnectionsTable
#+BEGIN_SRC go :noweb yes
  var ConnectionsTable = make(map[int]connection)
#+END_SRC

Теперь о самой стейт-машине. Эта машина:
- регистрирует новых клиентов
- возвращает
- ведет учет, сколько их "вживых" и сколько было зарегистрированно
- сигнализирует, если нет ни одного клиента онлайн

Данные стейт-машина получает из канала, куда постоянно приходят структуры
типа ~connection~. Первым делом машина проверяет статус клиента - он
может быть "new" - тогда его надо зарегистрировать и отправить в другой
канал сообщение, что клиент успешно зарегистрирован на сервере и
инкрементировать кол-во зарегистрированных клиентов и кол-во живых - или
"dead" - тогда надо декрементировать кол-во активных клиентов и
проверить, есть еще активные клиенты или нет. Если никого нет, то
выходим.

#+NAME: _servRegisterNewClient
#+BEGIN_SRC go :noweb yes :tangle server.go
  func RegisterClientsStateMachine( ch chan connection, ch2 chan bool, wg *sync.WaitGroup ) {

      var alive int
      var all int

      for {
          newConnection, ok := <- ch

          if ok == false {
              wg.Done()
              return

          } else {
              state := newConnection.Status

              switch state {

              case "new":
                  // сохранить нового клиента
                  ConnectionsTable[newConnection.ClientID] = newConnection
                  alive++
                  all++
                  ch2 <- true

              case "dead":
                  all--

                  if alive > all && alive == 0 {
                      wg.Done()
                      return
                  }
              }
          }
      }
      return
  }
#+END_SRC

* Стейт машина для обработки клиента

Это наиболее разветвленная стейт-машина. Для каждого клиента создается в
отдельном потоке экземпляр этой стет-машины.

Она состояит из двух одновременно работающих потоков:
- ~GetMessege~ - который постоянно принимает пакеты от клиента
- ~SendMessege~ - который постоянно отправляет пакеты клиентам, которым
  они предназначены, если это возможно, а так же шлет "пинг" клиенту.

Эти потоки общаются друг с другом с помощью канала и фактически сами по
тебе являются крохотными стейт-машинами.

** GetMessege
Когда клиент только подключается к серверу, сервер не знает его ID -
известна только структура соединения. Поэтому сервер только включает
новый экземпляр стейт-машины, а вот ~GetMessage~ при получении первого
пакета от клиента, вызовет регистрацию клиента, передав его структуру со
статусом "new" стейт-машине ~RegisterClientsStateMachine~.

То же самое, если клиент отправит сообщение о своем выходе - тогда
~GetMessage~ отправит структуру клиента со статусом "dead".
К тому же ~GetMessage~ должен перенаправлять пакеты ~SendMessege~,
который их будет отправлять.

Поэтому ему помимо структуры соединения клиента передается аж три канала:
первые два служат для общения с ~RegisterClientsStateMachine~: через один
ему посылаются структура клиента для регистрации, а через другой
считывается ответ, зарегестрирован ли клиент. Третий же канал служит для
общения с ~SendMessege~ и через него передаются принятые пакеты.

Так же уже говорилось, что сервер "пингует" клиент, сообщая ему, что
соединение не разорвано: [TODO:gmm] если клиент ничего не слал n времени,
это повод считать, что он не онлайн.

Пинг будет происходить каждые 4 секунды - для этого ~GetMessege~ на своей
стороне создаст пустой пакет, который пошлет ~SendMessege~ через канал,
чтоб тот отослал его клиенту - как клиент определит, что пакет пустой и
подробно о структуре пакета будет рассказано в разделе о клиенте.

Таким образом у GetMessage есть следующие состояния:
- пакет пришел (да/нет)
- клиент зарегистрирован (да/нет)

#+NAME: _servGetMessage
#+BEGIN_SRC go :noweb yes :tangle server.go
  <<_serialization>>

  func GetMessage( connect *net.TCPConn, ch chan connection, ch2 chan bool,
      ch3 chan sendPackage ) {

      RegistrState := "no"
      buf := make([]byte, packSize)

      for {
          timeoutDuration := 4 * time.Second
          connect.SetReadDeadline( time.Now().Add(timeoutDuration))
          len, err := connect.Read( buf )

          // пакет пришел?
          switch err {

          // да
          case nil:
              fmt.Printf("--GetMessage--: message recieved, len %d bytes \n", len );

              // клиент зарегистрирован?
              switch RegistrState {

              // нет
              case "no":
                  pack, err := deserialization( buf[:len] )
                  // отправить данные клиента на регистрацию
                  if err == nil {
                      newConnection:= connection{ Status: "new", ClientID: pack.MyID,
                          Connect:  connect }
                      ch <- newConnection

                      // регистрация законцена?
                      finished :=  <- ch2
                      if finished == true {
                          ch3 <- pack
                          RegistrState = "yes"
                      }
                  }
                  // да
              case "yes":
                  pack, err := deserialization( buf[:len] )
                  if err == nil {
                      ch3 <- pack
                  }
              }

          // нет
          default:
              pack := sendPackage{ SendStatus: 1 }
              ch3 <- pack

          }
      }
  }

  <<_servSendMessage>>
#+END_SRC

** SendMessage
~SendMessage~ в свою очередь просто отправляет пакеты юзеру и имеет
слдующие возможные состояния:
- юзер, которому преднахначается пакет, не существует (еще не зареган в
  таблице соединений) - тогда у пакета изменится статус отправки и он
  будет отправлен тому клиенту, от которого он пришел
- юзер, которому преднзначается пакет, существует - тогда будет найдено
  его соединение и пакет будет ему отправлен
- отправляется пакет-пинг (он не содержит в себе сообщение) - в этом
  случае не имеет значения, зарегистрирован клиент или нет
- юзер хочет выйти - тогда надо отправить в ~RegisterClientsStateMachine~
  структуру клиента со статусом "dead", а пакет - не отправлять.

[TODO:gmm] убрать запрос напрямую к глобальной таблице соединений
[TODO:gmm] ввести константы для статусов отправки
#+NAME: _servSendMessage
#+BEGIN_SRC go :noweb yes
  <<_servCheckErrorSendMessage>>

  func SendMessage( MyConnect *net.TCPConn, ch1 chan connection, ch2 chan sendPackage) {

      for {
          pack := <- ch2
          status := pack.SendStatus

          // проверяем статус отправки
          switch status {

          // пустой пинг-пакет
          case 1:
              sendBuf, err := serialization( &pack )

              if err == nil {
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }

          // полноценный пакет
          case 0:
              CurConnect, found := ConnectionsTable[pack.UserID]

              // получатель зарегистрирован?
              switch found {

              case true:
                  fmt.Printf("found\n")
                  connectUser := CurConnect.Connect
                  fmt.Printf("%v \n", connectUser)
                  sendBuf, err := serialization( &pack )
                  len, err := connectUser.Write( sendBuf )
                  CheckErrorSendMessage( err, len)

              case false:
                  fmt.Printf("not found\n")
                  pack.SendStatus = -1
                  sendBuf, err := serialization( &pack )
                  len, err := MyConnect.Write( sendBuf )
                  CheckErrorSendMessage( err, len)
              }
          // клиент сообщил о выходе
          case -5:
              DeadConnect := connection{ Status: "dead", ClientID: pack.MyID }
              ch1 <- DeadConnect
              return
          }
      }
  }

  <<_servMain>>
#+END_SRC

Теперь реализуем функцию, которая проверяет ошибки:

#+NAME: _servCheckErrorSendMessage
#+BEGIN_SRC go :noweb yes
  func CheckErrorSendMessage( err error, len int ) {
      if err != nil {
          fmt.Printf("--CheckErrorSendMessage--: Can't send: %s \n", err.Error())
      } else {
          fmt.Printf("--CheckErrorSendMessage--: Bytes sent: %d \n", len)
      }
      return
  }
#+END_SRC

* Константы, пакеты и main
Вписываем необходимые пакеты:

#+NAME: _servPackeges
#+BEGIN_SRC go :noweb yes :tangle
  package main

  import (
      "fmt"
      "net"
      "os"
      "encoding/json"
      "sync"
      "time"
  )

  <<_sendPackage>>
  <<_servConnection>>
#+END_SRC

Теперь введем необходимые константы, которые использу.тся на стороне
сервера:

[TODO:gmm] Нормально установить максимально возможный размер пакета. Если
пакет больше - резать на стороне клиента и отправлять частями.

#+NAME: _servConsts
#+BEGIN_SRC go :noweb yes
  const (
      packSize = 1000
      msgSizeStrings = 10
  )

  <<_servConnectionsTable>>
#+END_SRC

Добавляем ~main~, который вызывает первую стейт-машину,
инициализирующую работу сервера:

#+NAME: _servMain
#+BEGIN_SRC go :noweb yes

  func main () {
      InitServerState()
      return
  }

#+END_SRC

* Компоненты, которые будут объяснены на стороне клиента

Без этого не станглится и не заработает.

#+NAME: _sendPackage
#+BEGIN_SRC go :noweb yes
  type sendPackage struct {

      MyID int
      UserID int
      Message []string
      SendStatus int
  }
#+END_SRC

#+NAME: _serialization
#+BEGIN_SRC go :noweb yes
  func serialization( pack *sendPackage ) ( []byte, error )  {

      buf, err:= json.Marshal( pack )

      if err != nil {
          fmt.Printf(" \n Cound'n serialize data: ", err.Error(), "\n" )
      }
      return buf, err
  }
  <<_deserialization>>
#+END_SRC

#+NAME: _deserialization
#+BEGIN_SRC go :noweb yes
  func deserialization( buf []byte ) ( sendPackage, error )  {

      pack := sendPackage{}
      err:= json.Unmarshal( buf, &pack )

      if err != nil {
          fmt.Printf(" \n Cound'n deserialize data: ", err.Error(), "\n" )
      }
      return pack, err
  }

#+END_SRC
