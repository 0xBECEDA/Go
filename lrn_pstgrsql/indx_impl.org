* Интро
Самостоятельная реализация индексов для БД.

* Реализация B-дерева
B-дерево – это сбалансированное дерево поиска, в котором каждый узел
содержит множество ключей и имеет более двух потомков.

В В-дереве сложность поиска составляет O(log n).

Фишка B-дерева в том, что жёсткий диск читает/пишет данные большими
кусочками за раз (например, по 4кб), и количество потомков в вершине
подбирается под это ограничение. Получается очень "невысокое" дерево,
хорошо подходящее для хранения на диске. Диск сильно медленнее
процессора, поэтому мы можем себе позволить хранить потомков в массиве и
поддерживать их упорядоченность при вставке/удалении — всё равно
перезапись делается кусками по 4кб (или сколько там в новых) ( коммент на
хабре к этой статье https://habr.com/ru/company/otus/blog/459216/ )

~Свойства B-дерева~
У каждого B-дерева есть свой порядок. Допустим, у нашего B-дерева порядок
m. Тогда свойства:

- все узлы, кроме корня должны иметь как минимум (m/2) – 1 ключей и
  максимум m-1 ключей. Т.е. если m = 4 (4ый порядок), то максимум у
  каждой ноды будет 3 ключа, а минимум - 2.

- все узлы без листьев, кроме корня (т.е. все внутренние узлы), должны
  иметь минимум m/2 потомков. Т.е., опять же, если m = 2, то узла должно
  быть минимум 2 потомка, если узел - это не лист и не корень.

- если корень – это узел не содержащий листьев, он должен иметь минимум 2
  потомка. Т.е. если корень - это лист (больше нет данных для построения
  веток), то корень доджен иметь минимум 2х потомков и неважно при каком
  порядке b-дерева.

- узел без листьев с n-1 ключами должен иметь n потомков. Т.е. если у
  ноды 2 значения, у нее должно быть 3 потомка, если 3 значения, то 4
  потомка и т.д.

- все ключи в узле должны располагаться в порядке возрастания их значений

- все листья в дереве долны находиться на одном уровне вложенности -
  т.е. от корня до любого листа длина пути будет одинаковой.

Поэтому это дерево сильно ветвистое и сбалансированное. И поэтому
сложность посика по нему всегда будет O(log n), а не O(n) как может быть
с бинарным деревом, если оно не сбалансировано, например.

Теперь про реализацию:
- b-дерево должно обладать всеми названными свойствами
- вставка ключа возможна только в лист дерева

Реализуем B-дерево 4го порядка.

** Структура узла
Сначала реализуем структуру узла: у него будет максимум 3 ключа и
максимум 4 потомка.

#+NAME: _node
#+BEGIN_SRC lisp :noweb yes
  (defstruct (node)
    elt1 elt2 elt3
    (parent nil)
    (child1 nil)
    (child2 nil)
    (child3 nil)
    (child4 nil))
#+END_SRC

** Вставка элемента

- Проверить пустое ли дерево.

- Если дерево пустое, создать новый узел с новым значением ключа и
его принять за корневой узел.

- Если дерево не пустое, найти подходящий узел-лист, к которому
будет добавлено новое значение, используя логику дерева двоичного поиска:
т.е. если смотрим, больше значение или меньше текущих ключей и в
зависимости от этго выбираем потомка, по которому пойдем.

- Если в текущем узле-листе есть незанятая ячейка, добавить новый
ключ-значение к текущему узлу-листу, следуя возрастающему порядку
значений ключей внутри узла: т.е. самый левый элемент - это самое
маленькое значение, а самое правое - самое большое (написать функцию
сортировки для значений в узле)

Теперь самый сложный случай: лист, в который мы хотим вставить значение,
уже полон. Мы не можем просто создать дочерний узел и вписать в него
желаемое значение, создав таким образом новый лист - иначе B-дерево
станет несбалансированным.

Поэтому единственный выход - это разбить текущий лист на два узла, в один
из которых будет вставлено новое значение.

Как это происходит:
- находим лист, куда хотим вставить новый ключ

- берем медианное значение из листа - т.е. то, что посередине и
  отправляем его в родительскую ноду: при этом нужно определить, куда
  именно вставить медианое значение в родительскую ноду, чтоб не нарушать
  порядок значений в родительском узле.

- корректируем указатели таким образом, чтоб родительская нода указывала
  на 2 половинки разделенного листа + надо собюсти еще одно свойство
  B-дерева: если в родительской ноде 2 значения, то у нее должно быть 3
  потомка, если 3 значения, то 4 потомка и т.д. Или потомков не должно
  быть вообще - иначе опять нарушается сбалансированность дерева.

Непритность состоит в том, что родительская нода тоже может быть
полностью занята. Тогда придется разделить и ее, а затем ее родителя,
если и он занят, и т.д. до тех пор, пока не удастся вставить
элемент. Даже если ради этого придется создать новый корень дерева.


Как происходит разделение поэтапно:
1. берем медианный элемент

2. берем все элементы справа и слева от него: формируем из них 2
  самостоятельных узла. В узле моего B-дерева может быть максимум 3
  значения и максимум 4 потомка.

Это значит, что элемент слева образует самостоятельный узел и забирает
себе 1 и 2 потомок. А элемент справа забирает себе 3 и 4 потомка.

3. выбираем, в какой из двух новых узлов будет вставлен новый элемент

4. вставляем новый элемент в новый узел: следим, чтоб значение в узле шли
   от большего к меньшему, а так же контролируем указатели на дочерние
   узлы.

5. проверяем, есть ли в родиьельском узле место для вынутого серединного
   элемента. Если есть - повторяем пункт 4. Иначе идем на пункт 1.

Пишем процедуру разделения ~split~. В качестве параметра она принимает
лист дерева и элемент, который в него должен быть вставлен. Процедура
рекурсивная: она остановится в том случае, если удастся вставить
элемент.

Предикат, определяющий, заполнен ли узел полностью:
#+NAME: _full?
#+BEGIN_SRC lisp :noweb yes
  (defun full? (node)
    (and (not (null (node-elt1 node)))
         (not (null (node-elt2 node)))
         (not (null (node-elt3 node)))))
#+END_SRC

Проверяет порядок значений в узле:
#+NAME: _check_order
#+BEGIN_SRC lisp :noweb yes
  (defun check-order (node)
    (< (node-elt1 node)
       (node-elt2 node)
       (node-elt3 node)))
#+END_SRC


Эту функция берет первый попавшийся элемент из ноды и возвращает его -
это нужно, чтоб сравнить элемент из потомка с элементом из родителя: от
этого будет зависеть, как переколбасить потомков в случае, если значения
в узле были поменены местами.

#+NAME: _get_any_child_elt
#+BEGIN_SRC lisp :noweb yes
  (defun get-any-elt (node)
    (cond ((null node) node)
           ((not (null (node-elt1 node)))
           (node-elt1 node))
          ((not (null (node-elt2 node)))
           (node-elt2 node))
          (t (node-elt3 node))))

  (setf test (make-node :elt2 4
                        :elt3 3))

  (setf test (make-node :elt1 0
                        :elt2 4
                        :elt3 3))
  (get-any-elt test)

#+END_SRC

Нам нужно перекомбинировать ноду, если в нее вставляет новый элемент
(неважно, нода - это лист или нет) - при вставке модет нарушиться
возрастающий порядок элементов и/или потомки будут неправильно
распределены между элементами.

Для этого делаем три функции:
- ~sort-childs~ - сортирует потомков так, чтоб
элементы из child1 были < elt1, элемент child2 были > elt1 и < elt2, элементы child3
я > elt2 и < elt3, а элементы child4 > elt3. Возвращает список
отсортированных нод.

- ~sort-values-in-node~ - сортирует значения в ноде так, чтоб  elt1 <
  elt2 < elt3. Возвращает список отсортированных значений.


- ~recombine-node~ - вызывает обе вышеназванные функции, затем по очереди
  вытакскивает отсортированные значения из полученных списков и
  присваивают их полям ноды: ~car~ списка отсортированных ключей - это
  elt1, ~cadr~ - elt2  и т.д., и аналогично с потомками.

#+NAME: _sort_elts_in_node
#+BEGIN_SRC lisp :noweb yes
  (defun sort-childs (list-of-nodes)
    (sort list-of-nodes (lambda (node1 node2)
                          (let ((elt1 (get-any-elt node1))
                                (elt2 (get-any-elt node2)))
                            (if (and (not (null elt1))
                                     (not (null elt2))
                                     (< elt1 elt2))
                                node1)))))

  (defun sort-values-in-node (list-of-values)
    (sort list-of-values (lambda (elt1 elt2)
                            (if (and (not (null elt1))
                                     (not (null elt2))
                                     (< elt1 elt2))
                                elt1))))

  ;; (setf test (make-node :elt1 2
  ;;                       :elt2 3
  ;;                       :elt3 4))

  ;; (setf test2 (make-node :elt1 6
  ;;                       :elt2 8
  ;;                       :elt3 3))

  ;; (setf test3 (make-node :elt2 9
  ;;                        :elt3 10))

  ;; (sort-childs (list test test2 test3 nil))


  (defun recombine-node (node)
    (let* ((list-of-values
            (list (node-elt1 node)
                  (node-elt2 node)
                  (node-elt3 node)))
           (list-of-childs
            (list (node-child1 node)
                  (node-child2 node)
                  (node-child3 node)
                  (node-child4 node)))
           (sorted-list-of-values
            (sort-values-in-node list-of-values))
           (sorted-list-of-childs
            (sort-childs list-of-childs)))
      (setf (node-elt1 node) (car sorted-list-of-values)
            (node-elt2 node) (cadr sorted-list-of-values)
            (node-elt3 node) (caddr sorted-list-of-values))
      (setf (node-child1 node) (car sorted-list-of-childs)
            (node-child2 node) (cadr sorted-list-of-childs)
            (node-child3 node) (caddr sorted-list-of-childs)
            (node-child4 node) (cadddr sorted-list-of-childs)))
    node)


  ;; (setf test (make-node :elt1 -4
  ;;                       :elt2 0))

  ;; (setf test2 (make-node :elt1 2))

  ;; (setf test3 (make-node :elt1 5
  ;;                        :elt2 6
  ;;                        :elt3 12))

  ;; (setf test4 (make-node :elt1 20
  ;;                        :elt2 32
  ;;                        :elt3 36))

  ;; (setf tree (make-node :elt1 18
  ;;                       :elt2 1
  ;;                       :elt3 3
  ;;                       :child1 test
  ;;                       :child2 test2
  ;;                       :child3 test3
  ;;                       :child4 test4))

  ;; (recombine-node tree)

  ;; (setf tree2 (make-node :elt1 18
  ;;                        :elt2 1
  ;;                        :elt3 3
  ;;                        :child1 test2
  ;;                        :child2 test
  ;;                        :child3 test4
  ;;                        :child4 test3))
  ;; (recombine-node tree2)

  ;; (setf tree2 (make-node :elt1 3
  ;;                        :elt2 18
  ;;                        :elt3 3
  ;;                        :child1 test4
  ;;                        :child2 test2
  ;;                        :child3 test3
  ;;                        :child4 test))
  ;; (recombine-node tree2)
#+END_SRC

Эта функция вставляет заданный элемент в ноду, если в ней есть место:
#+NAME: _insert_key_into_node
#+BEGIN_SRC lisp :noweb yes
  (defun insert-key-into-node (node key)
    (cond ((null (node-elt1 node))
           (progn
             (setf (node-elt1 node) key)
             t))
          ((null (node-elt2 node))
           (progn
             (setf (node-elt2 node) key)
             t))
          ((null (node-elt3 node))
           (progn
             (setf (node-elt3 node) key)
             t))
          (t nil)))
#+END_SRC

Эта функция присоединяет потомка к ноде в случае, если какой-то из
потомков на занят - это нужно, чтоб присоединить "разделенный" лист к
родительскому узлу (две ветви, образовывшиеся от листа, станут потомкам
родителя)

#+NAME: _insert_key_into_node
#+BEGIN_SRC lisp :noweb yes
  (defun append-child-to-node (node child)
    (cond ((null (node-child1 node))
           (progn
             (setf (node-child1 node) child)
             t))
          ((null (node-child2 node))
           (progn
             (setf (node-child2 node) child)
             t))
          ((null (node-child3 node))
           (progn
             (setf (node-child3 node) child)
             t))
          ((null (node-child4 node))
           (progn
             (setf (node-child4 node) child)
             t))
          (t nil)))
#+END_SRC

Теперь пишем процедуру, которая разделит узел на два и вернет 2
самостоятельные ноды с потомками, если они у них есть.

#+NAME: _split
#+BEGIN_SRC lisp :noweb yes
  (defun split (tree)
    (if (full? tree)
        (let ((left-node (make-node :parent (node-parent tree)
                                    :elt1 (node-elt1 tree)
                                    :child1 (node-child1 tree)
                                    :child2 (node-child2 tree)))
              (right-node (make-node :parent (node-parent tree)
                                     :elt1 (node-elt3 tree)
                                     :child1 (node-child3 tree)
                                     :child2 (node-child4 tree))))
          (values left-node right-node))
        (values nil nil)))

  ;; (setf test (make-node :elt1 -4
  ;;                       :elt2 0))

  ;; (setf test2 (make-node :elt1 2))

  ;; (setf test3 (make-node :elt1 5
  ;;                        :elt2 6
  ;;                        :elt3 12))

  ;; (setf test4 (make-node :elt1 20
  ;;                        :elt2 32
  ;;                        :elt3 36))

  ;; (setf tree (make-node :elt1 1
  ;;                       :elt2 3
  ;;                       :elt3 18
  ;;                       :child1 test
  ;;                       :child2 test2
  ;;                       :child3 test3
  ;;                       :child4 test4))
  ;; (split tree)

  ;; (setf tree (make-node :elt1 1
  ;;                       :elt2 3
  ;;                       :child1 test
  ;;                       :child2 test2
  ;;                       :child3 test3))

  ;; (split tree)
#+END_SRC

Теперь можно создать процедуру, которая будет осуществлять вставку
элемента в случае, если мы дошли до листа в дереве и поняли, что он
полон, т.е. его придется делить.

Это означает, что процедура будет рекурсивной, только обходить дерево она
будет не с корня до листа, а в обратном направлении. Процедура принимает
дерево, ключ, который необходимо вставить, и два поддерева. Рекурсия заканчивается в том
случае, если ключ вставлен и дерево перебалансированно.

Алгорим работы:
- получить медианный элемент листа (узла - в случае, если пытаеся
  вставить элемент, унаследованный от родителя, "в дедушку" или даже
  "прадедушку")

- делим узел на два самостоятельных узла

- вставляем в один из них ключ - смотрим, к какому узлу ключ подходит -
  для этого нужно сравнить ключ с медианным значением узла: если меньше,
  то пишем в "левый" узел, если больше в "правый" - и следим, чтоб
  значения в узле шли в возрастающем порядке.

- Если есть поддеревья, переданные как формальные параметры при вызове
  функции, присоединяем их к полученным от разделения узлам: проверям,
  кому какое поддерево подходит

- пробуем вставить медианный элемент в родителя узла, а два новых узла( и
  их дочерние узлы, если они есть), получившихся от разделения ноды
  пытаемся присоединить к родительскому узлу в качестве потомков.

  Если все прошло успешно, рекурсия заканчивается.

- если это сделать невозможно, потому что родительский узел полон, то:
  - если текущий родительский узел - это корень - то создаем новый
    корень. Два имеющихся поддерева становятся его ветками, а медианный
    элемент - единственным ключом в новом корне.
    Возвращаем новый корень

  - если же текущий родительский элемент - это не корень, то:
    - медианный элемент становится новым ключом для вставки
    - два узла, получившихся от разделения узла/листа с их поддеревями
      передаются как поддеревья-параметры
    - переходим на уровеь вложенности родителя
    - рекурсивно вызываем функцию

Пишем процедуру, которая проверя дошли ли мы до листа - у листа нет потомков:
#+NAME: _leaf
#+BEGIN_SRC lisp :noweb yes
  (defun leaf? (node)
    (and (null (node-child1 node))
         (null (node-child2 node))
         (null (node-child3 node))
         (null (node-child4 node))))

  ;; тесты
  (leaf? (make-node :elt1 3))
  (leaf? (make-node :elt1 3 :child1 (make-node :elt1 4)))
#+END_SRC

Пишем процедуру, которая определяет, не равен ли ключ какому-то из
значений текущего узла:

#+NAME: _equal_key
#+BEGIN_SRC lisp :noweb yes
  (defun equal-key? (node key)
    (or (equal (node-elt1 node) key)
        (equal (node-elt2 node) key)
        (equal (node-elt3 node) key)))
#+END_SRC


#+NAME: _recombine_tree
#+BEGIN_SRC lisp :noweb yes

#+END_SRC

#+NAME: _make_b_tree
#+BEGIN_SRC lisp :noweb yes
  (defun insert-b-tree( key tree )
    (cond ((null tree) (make-node :elt1 key))
          ((leaf? tree)
           (cond ((equal-key? tree key) tree)
                 ((null (node-elt2 tree)) (setf (node-elt2 tree) key))
                 ((null (node-elt3 tree)) (setf (node-elt3 tree) key))

                 (t ))



           (t (cond ((equal-key? tree key) tree)
                    (((node-elt1 tree) > key) (insert-b-node key (node-child1 tree)))
                    ((and ((node-elt1 tree) < key)
                          (and (not (null (node-elt2 tree)))
                               (node-elt2 tree) > key))
                     (insert-b-node key (node-child2 tree)))
                    ((and (and (not (null (node-elt2 tree)))
                               (node-elt2 tree) < key)
                          (and (not (null (node-elt3 tree)))
                               (node-elt3 tree) > key))
                     (insert-b-node key (node-child3 tree)))
                    (t (insert-b-node key ( node-child4 tree))))))))
#+END_SRC
